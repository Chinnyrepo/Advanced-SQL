1. Create a stored procedure named spInsertProduct that inserts a row into the Products table. This stored procedure 
   should accept five parameters. One parameter for each of these columns: CategoryID, ProductCode, ProductName, ListPrice,
   and DiscountPercent. (Note that ProductID is an identity column.) This stored procedure should set the Description column
   to an empty string, and it should set the DateAdded column to the current date. If the value for the ListPrice column 
   is a negative number, the stored procedure should raise an error that indicates that this column doesnâ€™t accept negative
   numbers. Similarly, the procedure should raise an error if the value for the DiscountPercent column is a negative number.
   Code at least two EXEC statements that test this procedure, one with correct parameters, and one that causes an error. 
   Run SELECT query that shows the inserted row(s).

   USE MyGuitarShop;
   GO

   -- check the database and drop the procedure if it already exists
   IF OBJECT_ID('spInsertProduct') IS NOT NULL    
   DROP PROC spInsertProduct;  
   GO

   --create a stored procedure called spInsertProduct
   CREATE PROC spInsertProduct
       @CategoryID      int, 
       @ProductCode     varchar(10), 
       @ProductName     varchar(50),   
       @ListPrice       money,  
       @DiscountPercent int
    
   AS

   -- Data Validation
   IF NOT EXISTS ( SELECT * FROM Categories WHERE CategoryID = @CategoryID) 
       THROW 50001, 'Invalid CategoryID.' , 1;
   IF @ListPrice IS NULL OR @ListPrice <= 0
       THROW 50001, 'This column does not accept negative numbers.', 1;
   IF @DiscountPercent < 0
       THROW 50001, 'This column does not accept negative numbers.', 1; 

   INSERT Products 
   VALUES (@CategoryID, @ProductCode, @ProductName, '', @Listprice, @DiscountPercent, GETDATE());

   EXEC spInsertProduct
   4, 'hoffman', 'The hoffman 5 keyboard', 499.99, 20;
   
   EXEC spInsertProduct
   4, 'hoffman', 'The hoffman 5 keyboard, -499.99, 20; 

   EXEC spInsertProduct
   4, 'hoffman', 'The hoffman 5 keyboard', 499.99, -20

   SELECT * FROM Products


2. Create two functions:
   a. The first function is named fnDiscountPrice that calculates the discount price of an item in the OrderItems table (discount 
   amount subtracted from item price). To do that, this function should accept one parameter for the item ID, and it should return 
   the value of the discount price for that item.
   b. The second function is named fnItemTotal and calculates the total amount of an item in the OrderItems table (discount price 
   multiplied by quantity). To do that, this function should accept one parameter for the item ID, it should use the fnDiscountPrice 
   function that you just created, and it should return the value of the total for that item.

   IF OBJECT_ID('fnDiscountPrice') IS NOT NULL
       DROP FUNCTION fnDiscountPrice;

   GO

   CREATE FUNCTION fnDiscountPrice
       (@ItemID int)
	   RETURNS money
   BEGIN
       RETURN (SELECT SUM(ItemPrice - DiscountAmount)
	        FROM OrderItems
			WHERE @ItemID = ItemID);
   END;

   PRINT dbo.fnDiscountPrice
   PRINT 'DiscountPrice: $' +
        CONVERT(varchar, dbo.fnDiscountPrice(1), 1);


   
  IF OBJECT_ID('fnItemTotal') IS NOT NULL
    DROP FUNCTION fnItemTotal;

  GO

  CREATE FUNCTION fnItemTotal
       (@ItemID int)
	   RETURNS money

  BEGIN
     RETURN (SELECT sum((ItemPrice - dbo.fnDiscountPrice(ItemID)) * Quantity)
	         FROM OrderItems
			 where @ItemID = ItemID);

  END;

  PRINT 'ItemTotal: $' +
        CONVERT(varchar, dbo.fnDiscountPrice(1), 1);

3.Create a trigger named Products_UPDATE that checks the new value for the DiscountPercent column of the Products table. This trigger should 
  raise an appropriate error if the discount percent is greater than 100 or less than 0. If the new discount percent is between 0 and 1, this 
  trigger should modify the new discount percent by multiplying it by 100. That way, a discount percent of .2 becomes 20. Test this trigger with 
  an appropriate UPDATE statement.

  IF OBJECT_ID ('Products_UPDATE') IS NOT NULL
    DROP TRIGGER Products_UPDATE;
  GO

  CREATE TRIGGER Products_UPDATE
       ON Products
	   AFTER UPDATE
  AS

  DECLARE  
       @DiscountPercent money;

  SELECT  @DiscountPercent = DiscountPercent from inserted;

  IF @DiscountPercent > 100
    THROW 50001, 'This column accepts values between 1 - 100.', 1; 
  IF @DiscountPercent < 0
    THROW 50001, 'This column accepts values between 1 - 100.', 1;
  IF @DiscountPercent < 1

    BEGIN   	
	    UPDATE Products
	    SET DiscountPercent = (SELECT DiscountPercent
		FROM Inserted) * 100
		WHERE ProductID IN(SELECT ProductID FROM Inserted);
		
  END

  SELECT * FROM Products
  WHERE ProductID = 1

  UPDATE Products 
  SET DiscountPercent = -100
  WHERE ProductID = 1

  UPDATE Products 
  SET DiscountPercent = 101
  WHERE ProductID = 1

  UPDATE Products 
  SET DiscountPercent = 0.2
  WHERE ProductID = 1
